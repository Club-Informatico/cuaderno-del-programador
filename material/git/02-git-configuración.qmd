# 02-comandos-Git

## Verificaci칩n y Ayuda

```bash
git
```
Muestra los comandos principales de Git y opciones de ayuda general.

```bash
git --version
```
**Verifica la versi칩n instalada** de Git en tu sistema.

```bash
git -v
```
Alias corto para `--version` (verifica la versi칩n).

```bash
git -h
```
Muestra **ayuda r치pida** con las opciones b치sicas de l칤nea de comandos.

## Configuraci칩n de Git

```bash
git config
```
Gestiona la **configuraci칩n** de Git (global, local o del sistema).

```bash
git config --global user.name "<nombre>"
```
Configura tu **nombre de usuario** globalmente para todos los repositorios.

```bash
git config --global user.email "<email>"
```
Configura tu **correo electr칩nico** globalmente (asociado a tus commits).

## Trabajando con Git

### Inicializaci칩n de Repositorios

```bash
git init
```
**Inicializa un nuevo repositorio** Git en el directorio actual.

```bash
git clone <url-repositorio>
```
**Clona un repositorio remoto** completo a tu m치quina local.

### Guardando Cambios

```bash
git status
```
Muestra el **estado actual** del repositorio (archivos modificados, staged, etc.).

```bash
git add <archivo>
```
**A침ade archivos espec칤ficos** al 치rea de staging (preparaci칩n para commit).

```bash
git add .
```
**A침ade todos los archivos modificados** al 치rea de staging.

```bash
git commit -m "<mensaje>"
```
**Guarda los cambios** en el historial con un mensaje descriptivo.

```bash
git commit --amend
```
**Modifica el 칰ltimo commit** (mensaje o archivos incluidos).

### Consulta del Historial

```bash
git log
```
Muestra el **historial de commits** con detalles de autor, fecha y mensaje.

```bash
git log --oneline
```
Muestra el historial en **formato compacto** (una l칤nea por commit).

```bash
git diff
```
Muestra las **diferencias** entre archivos modificados y la 칰ltima versi칩n.


---

>**游눠 Consejos Pr치cticos:**
>- Configura nombre y email antes de empezar a trabajar
>- Usa mensajes de commit claros y descriptivos
>- Revisa siempre `git status` antes de hacer commit
>- `git add .` a침ade todos los cambios, pero puedes ser espec칤fico con `git add <archivo>`
