# Comandos de Git - Gu√≠a Completa

## Verificaci√≥n y Ayuda

```bash
git
```
Muestra los comandos principales de Git y opciones de ayuda general.

```bash
git --version
```
**Verifica la versi√≥n instalada** de Git en tu sistema.

```bash
git -v
```
Alias corto para `--version` (verifica la versi√≥n).

```bash
git -h
```
Muestra **ayuda r√°pida** con las opciones b√°sicas de l√≠nea de comandos.

---

## Configuraci√≥n de Git

```bash
git config
```
Gestiona la **configuraci√≥n** de Git (global, local o del sistema).

```bash
git config --global user.name "<nombre>"
```
Configura tu **nombre de usuario** globalmente para todos los repositorios.

```bash
git config --global user.email "<email>"
```
Configura tu **correo electr√≥nico** globalmente (asociado a tus commits).

## Trabajando con Git

### Inicializaci√≥n de Repositorios

```bash
git init
```
**Inicializa un nuevo repositorio** Git en el directorio actual.

```bash
git clone <url-repositorio>
```
**Clona un repositorio remoto** completo a tu m√°quina local.

### Guardando Cambios

```bash
git status
```
Muestra el **estado actual** del repositorio (archivos modificados, staged, etc.).

```bash
git add <archivo>
```
**A√±ade archivos espec√≠ficos** al √°rea de staging (preparaci√≥n para commit).

```bash
git add .
```
**A√±ade todos los archivos modificados** al √°rea de staging.

```bash
git commit -m "<mensaje>"
```
**Guarda los cambios** en el historial con un mensaje descriptivo.

```bash
git commit --amend
```
**Modifica el √∫ltimo commit** (mensaje o archivos incluidos).

### Consulta del Historial

```bash
git log
```
Muestra el **historial de commits** con detalles de autor, fecha y mensaje.

```bash
git log --oneline
```
Muestra el historial en **formato compacto** (una l√≠nea por commit).

```bash
git diff
```
Muestra las **diferencias** entre archivos modificados y la √∫ltima versi√≥n.

## Gesti√≥n de Ramas (Branches)

```bash
git branch
```
Lista todas las **ramas locales** y muestra la rama actual.

```bash
git branch <nombre-rama>
```
**Crea una nueva rama** con el nombre especificado.

```bash
git checkout <nombre-rama>
```
**Cambia a la rama** especificada.

```bash
git checkout -b <nombre-rama>
```
**Crea y cambia** a una nueva rama (combinaci√≥n de branch + checkout).

```bash
git merge <nombre-rama>
```
**Fusiona la rama especificada** con la rama actual.

```bash
git branch -d <nombre-rama>
```
**Elimina una rama** local (solo si ya fue fusionada).

```bash
git branch -D <nombre-rama>
```
**Elimina una rama forzadamente** (aunque no est√© fusionada).

## Trabajo con Repositorios Remotos

```bash
git remote add origin <url-repositorio>
```
**A√±ade un repositorio remoto** llamado "origin".

```bash
git remote -v
```
Lista todos los **repositorios remotos** configurados.

```bash
git push origin <nombre-rama>
```
**Env√≠a commits** al repositorio remoto (rama especificada).

```bash
git push -u origin <nombre-rama>
```
**Env√≠a commits y establece** la rama remota por defecto.

```bash
git pull origin <nombre-rama>
```
**Obtiene cambios del remoto** y los fusiona localmente.

```bash
git fetch origin
```
**Descarga cambios del remoto** pero no los fusiona.

## Operaciones Avanzadas

```bash
git stash
```
**Guarda cambios temporales** sin hacer commit (√∫til para cambiar de rama).

```bash
git stash pop
```
**Recupera los cambios** guardados con stash.

```bash
git reset --soft HEAD~1
```
**Deshace el √∫ltimo commit** pero mantiene los cambios en staging.

```bash
git reset --hard HEAD~1
```
**Elimina el √∫ltimo commit** y todos los cambios (¬°Cuidado! Es destructivo).

```bash
git rebase <rama-base>
```
**Reaplica commits** sobre otra rama (reescribe el historial).

```bash
git tag <nombre-tag>
```
**Crea una etiqueta** para marcar versiones espec√≠ficas.

```bash
git cherry-pick <commit-hash>
```
**Aplica un commit espec√≠fico** a la rama actual.

## Resoluci√≥n de Conflictos

```bash
git mergetool
```
Abre una **herramienta visual** para resolver conflictos de fusi√≥n.

```bash
git revert <commit-hash>
```
**Crea un nuevo commit** que deshace los cambios de un commit espec√≠fico.

---

**üí° Buenas Pr√°cticas:**
- Haz commits peque√±os y at√≥micos
- Escribe mensajes de commit claros y descriptivos
- Sincroniza frecuentemente con el repositorio remoto
- Usa ramas para features nuevos o experimentos
- Nunca hagas `git push --force` en ramas compartidas

**üõ†Ô∏è Flujo de Trabajo T√≠pico:**
```bash
git checkout -b feature/nueva-funcionalidad
# Realizar cambios...
git add .
git commit -m "Agrega nueva funcionalidad"
git push origin feature/nueva-funcionalidad
# Crear Pull Request en GitHub/GitLab
```

¬øNecesitas que profundice en alg√∫n comando espec√≠fico o en alg√∫n flujo de trabajo particular?