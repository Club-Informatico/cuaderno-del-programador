# 01-Python

## Ejecuci√≥n de Python

```bash
python
```
Abre el **int√©rprete interactivo** de Python (REPL) donde puedes ejecutar c√≥digo l√≠nea por l√≠nea.

```bash
python --version
```
**Verifica la versi√≥n** de Python instalada en el sistema.

```bash
python -V
```
Alias corto para `--version` (muestra la versi√≥n).

```bash
python script.py
```
**Ejecuta un archivo Python** desde la terminal.

```bash
python -m <modulo>
```
Ejecuta un **m√≥dulo como script** (ej: `python -m http.server`).

## Opciones √ötiles de L√≠nea de Comandos

```bash
python -c "<c√≥digo>"
```
Ejecuta **c√≥digo Python directamente** desde la terminal.

```bash
python -i script.py
```
Ejecuta un script y luego **entra al modo interactivo** manteniendo las variables.

```bash
python -O script.py
```
Ejecuta el script con **optimizaciones b√°sicas**.

```bash
python -OO script.py
```
Ejecuta con **optimizaciones agresivas** (elimina docstrings).

## Entornos Virtuales (Virtual Environments)

```bash
python -m venv <nombre-entorno>
```
**Crea un entorno virtual** para aislar dependencias del proyecto.

```bash
source <nombre-entorno>/bin/activate
```
**Activa el entorno virtual** (Linux/Mac).

```bash
<nombre-entorno>\Scripts\activate
```
**Activa el entorno virtual** (Windows).

```bash
deactivate
```
**Desactiva el entorno virtual** actual.

## Gesti√≥n de Paquetes con pip

```bash
pip install <paquete>
```
**Instala un paquete** de Python desde PyPI.

```bash
pip install -r requirements.txt
```
**Instala todas las dependencias** listadas en un archivo requirements.txt.

```bash
pip freeze > requirements.txt
```
**Genera un archivo requirements.txt** con las dependencias actuales.

```bash
pip uninstall <paquete>
```
**Desinstala un paquete**.

```bash
pip list
```
**Lista todos los paquetes** instalados.

```bash
pip show <paquete>
```
**Muestra informaci√≥n detallada** de un paquete espec√≠fico.

```bash
pip install --upgrade <paquete>
```
**Actualiza un paquete** a la √∫ltima versi√≥n.

## Desarrollo y Depuraci√≥n

```bash
python -m pdb script.py
```
Ejecuta el script con el **depurador integrado** de Python.

```bash
python -m doctest script.py
```
Ejecuta **tests doctest** incluidos en los docstrings.

```bash
python -m unittest discover
```
**Descubre y ejecuta tests** unittest autom√°ticamente.

```bash
python -m pytest
```
Ejecuta tests usando **pytest** (debe estar instalado).

## Herramientas de Desarrollo

```bash
python -m http.server 8000
```
**Sirve archivos locales** por HTTP en el puerto especificado.

```bash
python -m json.tool archivo.json
```
**Formatea y valida** archivos JSON.

```bash
python -m timeit "<c√≥digo>"
```
**Mide el tiempo de ejecuci√≥n** de c√≥digo Python.

```bash
python -m cProfile script.py
```
**Perfila el c√≥digo** para analizar rendimiento.

## Creaci√≥n de Paquetes

```bash
python setup.py sdist
```
**Crea un paquete fuente** para distribuci√≥n.

```bash
python -m build
```
**Construye el paquete** (requiere el m√≥dulo build instalado).

```bash
python -m twine upload dist/*
```
**Sube el paquete** a PyPI (requiere twine instalado).

## Comandos √ötiles para Jupyter

```bash
jupyter notebook
```
**Inicia Jupyter Notebook** en el navegador.

```bash
jupyter lab
```
**Inicia Jupyter Lab** (entorno m√°s avanzado).

```bash
jupyter kernel --version
```
Verifica la versi√≥n del **kernel de Jupyter**.

## Type Checking y An√°lisis

```bash
python -m mypy script.py
```
**Verifica tipos est√°ticos** (requiere mypy instalado).

```bash
python -m pylint script.py
```
**Analiza el c√≥digo** en busca de errores y estilo (requiere pylint).

```bash
python -m black script.py
```
**Formatea el c√≥digo** autom√°ticamente (requiere black).

```bash
python -m isort script.py
```
**Organiza imports** autom√°ticamente (requiere isort).

---

**üõ†Ô∏è Flujo de Trabajo T√≠pico:**
```bash
# Crear y activar entorno virtual
python -m venv myenv
source myenv/bin/activate

# Instalar dependencias
pip install -r requirements.txt

# Ejecutar tests
python -m pytest

# Ejecutar aplicaci√≥n
python main.py
```

**üîß Comandos de Depuraci√≥n R√°pidos:**
```bash
# Ejecutar con depuraci√≥n
python -m pdb script.py

# Verificar tipos
python -m mypy script.py

# Formatear c√≥digo
python -m black script.py
```

>**üí° Buenas Pr√°cticas:**
>
>- Siempre usa entornos virtuales por proyecto
>- Mant√©n un requirements.txt actualizado 
>- Usa type hints para mejor mantenibilidad 
>- Ejecuta tests antes de hacer commit 
>- Usa formateadores de c√≥digo como black 